Node has built in core modules which can be used to built any enterprise application without any external NPM modules.

Official Documentation for core modules of NodeJS v14 latest - https://nodejs.org/dist/latest-v14.x/docs/api/
Node.js Built-in Modules by w3schools - https://www.w3schools.com/nodejs/ref_modules.asp  


Path Module
- provides utilities for working with file and directory paths
- path module varies based on the OS on which the Node.js application is running
- using path.basename() might yield different results on POSIX and Windows.


some functions 
    - path.basename(myPath)); // returns basename of path (filename at the end)
    - path.dirname(myPath)); // directoryname of the file
    - path.extname(myPath)); // extension of the file
    - path.parse(myPath)); // returns object containing all path info


OS Module
- provides operating system-related utility methods and properties
- Has CPU, network, OS, User related info

some functions 
    - os.platform() // platform name: win32 / darwin / linux/ freebsd
    - os.release() //  os release version
    - os.homedir() // homedirectory
    - os.freemem() // free memory space in bytes
    - os.networkInterfaces() // network interfaces that have been assigned a network address
    - os.userInfo() // username,
    - os.cpus() // each cpu core information

FS Modules

NodeJS has a different data type called Buffer, which is a binary format of data.

NOTE: Stream and Buffer in nodeJS are very important and complex concepts to understand.

Every FS module functions have synchronous and asynchronous version.
Ex- WriteFile() [asynchronous] and WriteFileSync() [synchronous]

NodeJS is not supposed to manage IO operations using its main thread rather using its file system process. 
WriteFileSync() is synchronous in nature so it would block the main thread.

As for OS Module, the scenerio is opposite as there are no IO operations.

NOTE: Try as much using asynchronous rather than synchronous approach.
      Use only synchronous when you have no other option.

All asynchronous callback functions of Node Packages follow the same pattern -
    - there are two paramters - err and data. 
    - One of them becomes null and other one becomes available
    - 
    ex -    fs.readFile('myFile.txt', ( err, data) => {})

some functions 
    - fs.writeFileSync( FILENAME, 'Hello programmers!');    //sync
    - fs.appendFileSync( FILENAME, '\nHey ki obostha!!');   //sync
    - fs.writeFile( FILENAME, FILE-CONTENT, () => {});  //async
    - fs.readFile( FILENAME, (err, data2) => {});    // asynchronous read


Events Module
Most important module of nodeJS.
It is one of the most important building blocks of 'event based runtime' nodeJS.

'EventEmitter' Class : A builtin classs used to raise events. 

The job of Event listeners is to wait for the events they registered to and to fire their functions when they events start broadcasting.

All EventEmitters emit the event 'newListener' when new listeners are added and 'removeListener' when existing listeners are removed.

emitter.on(eventName, listener)     //register new listener function to the end of the listeners array for the event named eventName. 
emitter.emit(eventName[, ...args])  //Synchronously calls each of the listeners registered for the event named eventName

NOTE : Listener functions need to registered before the events are emitted.
Events can emit additional info in variable, object format.

NOTE : The object that emits event, must be the same object with which listeners are registered with. 

Also, events can be imported from external modules, by wrapping those events into a class that extends EventEmitter.
Importing on the main script, instantiate an object of that module and set listeners to receive the data and additional params emitted by that module.


HTTP Module

Usually for PHP Web application development, Apache server (WAMP, XAMP) is used to serve the pages. 
The server is kept running and the codes are put under 'htdocs' folder.

For nodeJS, server can be created inside application, which is powered on demand.

HTTP Module is used to use the HTTP server and client.
In order to support the full spectrum of possible HTTP applications, the Node.js HTTP API is very low-level.
HTTP message headers are represented by an object like this -
      
        { 'content-length': '123',
          'content-type': 'text/plain',
          'connection': 'keep-alive',
          'host': 'mysite.com',
          'accept': '*/*' }

http.Server object is an EventEmitter. 
When the server is created and fixed on a port to listen, it starts the 'Event Loop' which continuous cycles through the same process.

NOTE: When the server gets a new connection request, it fires a 'connection' event with a 'socket' object, which can be listened to.

Functions 
    - http.createServer([options][, requestListener])   //creates a new instance of http.Server with listener on contructor
    - server.listen( PORT-NUMBER )   // Starts the HTTP server listening for connections. 
    - server.on( EVENT, CALLBACK[])   //listens for a 'connection' event
