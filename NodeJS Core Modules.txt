Node has built in core modules which can be used to built any enterprise application without any external NPM modules.

Official Documentation for core modules of NodeJS v14 latest - https://nodejs.org/dist/latest-v14.x/docs/api/
Node.js Built-in Modules by w3schools - https://www.w3schools.com/nodejs/ref_modules.asp  


Path Module
- provides utilities for working with file and directory paths
- path module varies based on the OS on which the Node.js application is running
- using path.basename() might yield different results on POSIX and Windows.


some functions 
    - path.basename(myPath)); // returns basename of path (filename at the end)
    - path.dirname(myPath)); // directoryname of the file
    - path.extname(myPath)); // extension of the file
    - path.parse(myPath)); // returns object containing all path info


OS Module
- provides operating system-related utility methods and properties
- Has CPU, network, OS, User related info

some functions 
    - os.platform() // platform name: win32 / darwin / linux/ freebsd
    - os.release() //  os release version
    - os.homedir() // homedirectory
    - os.freemem() // free memory space in bytes
    - os.networkInterfaces() // network interfaces that have been assigned a network address
    - os.userInfo() // username,
    - os.cpus() // each cpu core information

FS Modules

NodeJS has a different data type called Buffer, which is a binary format of data.

NOTE: Stream and Buffer in nodeJS are very important and complex concepts to understand.

Every FS module functions have synchronous and asynchronous version.
Ex- WriteFile() [asynchronous] and WriteFileSync() [synchronous]

NodeJS is not supposed to manage IO operations using its main thread rather using its file system process. 
WriteFileSync() is synchronous in nature so it would block the main thread.

As for OS Module, the scenerio is opposite as there are no IO operations.

NOTE: Try as much using asynchronous rather than synchronous approach.
      Use only synchronous when you have no other option.

All asynchronous callback functions of Node Packages follow the same pattern -
    - there are two paramters - err and data. 
    - One of them becomes null and other one becomes available
    - 
    ex -    fs.readFile('myFile.txt', ( err, data) => {})
